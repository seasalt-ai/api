{
  "openapi": "3.0.2",
  "info": { "title": "Webhook Notification Server", "version": "0.1.0" },
  "paths": {
    "/api/v1/workspaces/{workspace_id}/subscription": {
      "get": {
        "tags": ["Webhook Subscriptions"],
        "summary": "Retrieves all notification subscriptions for a specific workspace",
        "operationId": "list_subscriptions_api_v1_workspaces__workspace_id__subscription_get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          },
          {
            "description": "Order items by field and direction, format: <field>:<direction> (e.g., created_at:desc)",
            "required": false,
            "schema": {
              "title": "Order By",
              "type": "string",
              "description": "Order items by field and direction, format: <field>:<direction> (e.g., created_at:desc)",
              "default": "created_at:desc"
            },
            "name": "order_by",
            "in": "query"
          },
          {
            "description": "Filter subscriptions by type (e.g., seasalt, zapier)",
            "required": false,
            "schema": {
              "allOf": [{ "$ref": "#/components/schemas/SubscriptionType" }],
              "description": "Filter subscriptions by type (e.g., seasalt, zapier)"
            },
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "post": {
        "tags": ["Webhook Subscriptions"],
        "summary": "Creates a new notification subscription",
        "description": "Create a new subscription with events.",
        "operationId": "create_subscription_api_v1_workspaces__workspace_id__subscription_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/SubscriptionPostType" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "callbacks": {
          "eventWebhook": {
            "{$request.body#/webhook_url}": {
              "post": {
                "summary": "Webhook Event Notification",
                "description": "The event payload depends on the event type.",
                "requestBody": {
                  "description": "The event data sent by webhook notification system.",
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/ConversationNewEvent"
                          },
                          {
                            "$ref": "#/components/schemas/ConversationUpdateEvent"
                          },
                          {
                            "$ref": "#/components/schemas/ConversationEndedEvent"
                          },
                          {
                            "$ref": "#/components/schemas/MessageNewEvent"
                          },
                          {
                            "$ref": "#/components/schemas/ConversationLabelAddedEvent"
                          },
                          {
                            "$ref": "#/components/schemas/ConversationLabelDeletedEvent"
                          },
                          {
                            "$ref": "#/components/schemas/CallNewEvent"
                          },
                          {
                            "$ref": "#/components/schemas/CallEndedEvent"
                          },
                          {
                            "$ref": "#/components/schemas/CallUpdatedEvent"
                          }
                        ],
                        "discriminator": {
                          "propertyName": "event_type"
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "The client acknowledges receipt of the event successfully."
                  }
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/api/v1/workspaces/{workspace_id}/subscription/{subscription_id}": {
      "get": {
        "tags": ["Webhook Subscriptions"],
        "summary": "Retrieves a specific notification subscription",
        "description": "Retrieve a subscription's webhook URL.",
        "operationId": "get_subscription_api_v1_workspaces__workspace_id__subscription__subscription_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Subscription Id", "type": "string" },
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "delete": {
        "tags": ["Webhook Subscriptions"],
        "summary": "Removes a notification subscription",
        "description": "Delete a subscription given a subscription id.",
        "operationId": "delete_subscription_api_v1_workspaces__workspace_id__subscription__subscription_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Subscription Id", "type": "string" },
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": {} } }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      },
      "patch": {
        "tags": ["Webhook Subscriptions"],
        "summary": "Updates an existing subscription",
        "description": "Update a subscription's webhook URL and/or event types.",
        "operationId": "update_subscription_api_v1_workspaces__workspace_id__subscription__subscription_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Subscription Id", "type": "string" },
            "name": "subscription_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionUpdateType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/api/v1/event_types": {
      "get": {
        "tags": ["Webhook Event Types"],
        "summary": "Get all supported event types",
        "description": "Get all available event types.\n\nArgs:\n    db (AsyncSession): The database session\n\nReturns:\n    List[EventTypeResponse]: List of all available event types\n\nRaises:\n    HTTPException: If there's a database error",
        "operationId": "list_events_api_v1_event_types_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Events Api V1 Event Types Get",
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/EventTypeCreate" }
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/api/v1/workspaces/{workspace_id}/test": {
      "post": {
        "tags": ["Test Webhook"],
        "summary": "Test Send Event Data To Webhook",
        "description": "Test sending a sample webhook event to the specified URL.",
        "operationId": "test_send_event_data_to_webhook_api_v1_workspaces__workspace_id__test_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WebhookTestRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WebhookTestResponse" }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/api/v1/workspaces/{workspace_id}/logs": {
      "get": {
        "tags": ["Webhook Delivery Event Logs"],
        "summary": "Get webhook delivery logs for a workspace",
        "description": "Retrieve webhook delivery logs for a specific workspace with optional filtering and pagination.",
        "operationId": "list_workspace_logs_api_v1_workspaces__workspace_id__logs_get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          },
          {
            "description": "Filter by event type",
            "required": false,
            "schema": {
              "title": "Event Type",
              "type": "string",
              "description": "Filter by event type"
            },
            "name": "event_type",
            "in": "query"
          },
          {
            "description": "Filter by delivery status",
            "required": false,
            "schema": {
              "title": "Delivery Status",
              "type": "string",
              "description": "Filter by delivery status"
            },
            "name": "delivery_status",
            "in": "query"
          },
          {
            "description": "Filter logs after this date (inclusive)",
            "required": false,
            "schema": {
              "title": "Start Date",
              "type": "string",
              "description": "Filter logs after this date (inclusive)",
              "format": "date-time"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "description": "Filter logs before this date (inclusive)",
            "required": false,
            "schema": {
              "title": "End Date",
              "type": "string",
              "description": "Filter logs before this date (inclusive)",
              "format": "date-time"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "description": "Order items by field and direction. Example: created_at:desc",
            "required": false,
            "schema": {
              "title": "Order By",
              "type": "string",
              "description": "Order items by field and direction. Example: created_at:desc",
              "default": "created_at:desc"
            },
            "name": "order_by",
            "in": "query"
          },
          {
            "description": "Optional, determine the number of returned rows after skipped offset, 0 is unlimit, default is 0",
            "required": false,
            "schema": {
              "title": "Limit",
              "minimum": 0.0,
              "type": "integer",
              "description": "Optional, determine the number of returned rows after skipped offset, 0 is unlimit, default is 0",
              "default": 0
            },
            "example": 0,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Number of items to skip",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0.0,
              "type": "integer",
              "description": "Number of items to skip",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_EventLogResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/api/v1/workspaces/{workspace_id}/logs/subscription/{subscription_id}": {
      "get": {
        "tags": ["Webhook Delivery Event Logs"],
        "summary": "Get webhook delivery logs for a subscription",
        "description": "Retrieve webhook delivery logs for a specific subscription with optional filtering and pagination.",
        "operationId": "list_subscription_logs_api_v1_workspaces__workspace_id__logs_subscription__subscription_id__get",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Subscription Id", "type": "string" },
            "name": "subscription_id",
            "in": "path"
          },
          {
            "description": "Filter by event type",
            "required": false,
            "schema": {
              "title": "Event Type",
              "type": "string",
              "description": "Filter by event type"
            },
            "name": "event_type",
            "in": "query"
          },
          {
            "description": "Filter by delivery status",
            "required": false,
            "schema": {
              "title": "Delivery Status",
              "type": "string",
              "description": "Filter by delivery status"
            },
            "name": "delivery_status",
            "in": "query"
          },
          {
            "description": "Order items by field and direction (e.g., created_at:desc)",
            "required": false,
            "schema": {
              "title": "Order By",
              "type": "string",
              "description": "Order items by field and direction (e.g., created_at:desc)",
              "default": "created_at:desc"
            },
            "name": "order_by",
            "in": "query"
          },
          {
            "description": "Optional, determine the number of returned rows after skipped offset, 0 is unlimit, default is 0",
            "required": false,
            "schema": {
              "title": "Limit",
              "minimum": 0.0,
              "type": "integer",
              "description": "Optional, determine the number of returned rows after skipped offset, 0 is unlimit, default is 0",
              "default": 0
            },
            "example": 0,
            "name": "limit",
            "in": "query"
          },
          {
            "description": "Number of items to skip",
            "required": false,
            "schema": {
              "title": "Offset",
              "minimum": 0.0,
              "type": "integer",
              "description": "Number of items to skip",
              "default": 0
            },
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponse_EventLogResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/api/v1/workspaces/{workspace_id}/logs/export": {
      "post": {
        "tags": ["Webhook Delivery Event Logs"],
        "summary": "Export Logs",
        "description": "Export logs for a workspace to an email",
        "operationId": "export_logs_api_v1_workspaces__workspace_id__logs_export_post",
        "parameters": [
          {
            "required": true,
            "schema": { "title": "Workspace Id", "type": "string" },
            "name": "workspace_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "title": "Email", "type": "string" },
            "name": "email",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Start Date",
              "type": "string",
              "format": "date-time"
            },
            "name": "start_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "End Date",
              "type": "string",
              "format": "date-time"
            },
            "name": "end_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "$ref": "#/components/schemas/LanguageCode" },
            "name": "lang",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportLogsJobResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    }
  },

  "components": {
    "schemas": {
      "EventLogResponse": {
        "title": "EventLogResponse",
        "required": [
          "id",
          "workspace_id",
          "event_id",
          "subscription_id",
          "event_type",
          "webhook_url",
          "delivery_status",
          "delivered_event_obj",
          "created_at"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "Unique identifier of the webhook delivery log",
            "example": "log_1234567890abcdef"
          },
          "workspace_id": {
            "title": "Workspace Id",
            "type": "string",
            "description": "ID of the workspace",
            "example": "ws_123456"
          },
          "event_id": {
            "title": "Event Id",
            "type": "string",
            "description": "ID of the event that triggered the webhook",
            "example": "evt_987654321"
          },
          "subscription_id": {
            "title": "Subscription Id",
            "type": "string",
            "description": "ID of the subscription that received the webhook",
            "example": "29efe26f-eb8a-4ee8-9abf-d8651a31283e"
          },
          "event_type": {
            "title": "Event Type",
            "type": "string",
            "description": "Type of event that was delivered",
            "example": "conversation.new"
          },
          "webhook_url": {
            "title": "Webhook Url",
            "type": "string",
            "description": "URL where the webhook was delivered",
            "example": "https://api.example.com/webhooks/incoming"
          },
          "delivery_status": {
            "title": "Delivery Status",
            "type": "string",
            "description": "Status of the webhook delivery",
            "example": "success"
          },
          "status_code": {
            "title": "Status Code",
            "type": "string",
            "description": "HTTP status code of the webhook response",
            "example": "200"
          },
          "response_body": {
            "title": "Response Body",
            "type": "string",
            "description": "Response body from the webhook endpoint",
            "example": "{\"status\": \"received\", \"message\": \"Webhook processed successfully\"}"
          },
          "delivered_event_obj": {
            "title": "Delivered Event Obj",
            "type": "string",
            "description": "The event object that was delivered",
            "example": {
              "id": "123456789abcdefg",
              "event_type": "message.new",
              "affect": "add",
              "version": "0.0.1",
              "timestamp": "2024-03-11T04:18:13.558258",
              "workspace": {
                "id": "ws_123456",
                "name": "MyWorksapce Name"
              },
              "source": {
                "id": "src_123456",
                "type": "WEBCHAT",
                "identifier": "Zapier AI Agent"
              },
              "data": {
                "message_id": "msg_123456",
                "conversation_id": "conv_123456",
                "conversation_title": "Zapier Conversation Example",
                "direction": "OUTBOUND",
                "created_at": "2024-03-11T04:18:13.558258",
                "sender": {
                  "id": "FREE_NOTIFY",
                  "name": "Zapier AI Agent",
                  "type": "AGENT"
                },
                "content": {
                  "type": "text",
                  "text": "Hello, how can I assist you today?"
                }
              }
            }
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "When the webhook delivery was attempted",
            "format": "date-time",
            "example": "2024-03-11T04:18:13.558258"
          }
        },
        "description": "Pydantic model for webhook delivery log response containing delivery details and status."
      },
      "EventTypeCreate": {
        "title": "EventTypeCreate",
        "required": ["event_type", "description"],
        "type": "object",
        "properties": {
          "event_type": {
            "title": "Event Type",
            "type": "string",
            "description": "The unique identifier for the event type",
            "example": "call.ended"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "A detailed description of when this event is triggered",
            "example": "Triggers when a call ends"
          }
        },
        "description": "Pydantic model for creating a new event type with its identifier and description."
      },
      "ExportLogsJobResponse": {
        "title": "ExportLogsJobResponse",
        "required": ["job_id", "message"],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string",
            "description": "The id of the job downloading and preparing the logs to be sent through email"
          },
          "message": {
            "title": "Message",
            "type": "string",
            "description": "The message marks the start of the downloading job running"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "LanguageCode": {
        "title": "LanguageCode",
        "enum": [
          "auto",
          "af",
          "af-ZA",
          "sq",
          "ar-DZ",
          "ar-BH",
          "ar-EG",
          "ar-IQ",
          "ar-JO",
          "ar-KW",
          "ar-LB",
          "ar-LY",
          "ar-MA",
          "ar-OM",
          "ar-QA",
          "ar-SA",
          "arb",
          "ar-SY",
          "ar-TN",
          "ar-AE",
          "ar-YE",
          "eu",
          "eu-ES",
          "be",
          "bg",
          "bg-BG",
          "ca",
          "ca-ES",
          "zh-HK",
          "zh-CN",
          "zh-SG",
          "zh-TW",
          "yue-CN",
          "yue-HK",
          "cmn-CN",
          "cmn-TW",
          "hr",
          "cs",
          "cs-CZ",
          "da",
          "da-DK",
          "nl-BE",
          "nl-NL",
          "nl",
          "en",
          "en-AU",
          "en-BZ",
          "en-CA",
          "en-IN",
          "en-IE",
          "en-JM",
          "en-NZ",
          "en-ZA",
          "en-TT",
          "en-GB",
          "en-US",
          "en-GB-WLS",
          "en-SG",
          "et",
          "fo",
          "fa",
          "fil-PH",
          "fi",
          "fi-FI",
          "fr-BE",
          "fr-CA",
          "fr-FR",
          "fr-LU",
          "fr",
          "fr-CH",
          "gd",
          "gl-ES",
          "de-AT",
          "de-DE",
          "de-LI",
          "de-LU",
          "de",
          "de-CH",
          "el",
          "el-GR",
          "he",
          "he-IL",
          "hi",
          "hi-IN",
          "hu",
          "hu-HU",
          "is",
          "is-IS",
          "id",
          "id-ID",
          "ga",
          "it-IT",
          "it",
          "it-CH",
          "ja",
          "ja-JP",
          "ko",
          "ko-KR",
          "ku",
          "lv",
          "lv-LV",
          "lt",
          "lt-LT",
          "mk",
          "ms-MY",
          "ml",
          "ml-IN",
          "ms",
          "mt",
          "mr-IN",
          "no",
          "nb",
          "nb-NO",
          "nn",
          "pl",
          "pl-PL",
          "pt-BR",
          "pt",
          "pt-PT",
          "pa",
          "pa-IN",
          "rm",
          "ro",
          "ro-MD",
          "ro-RO",
          "ru",
          "ru-MD",
          "ru-RU",
          "sr",
          "sr-RS",
          "sk",
          "sk-SK",
          "sl",
          "sb",
          "es-AR",
          "es-BO",
          "es-CL",
          "es-CO",
          "es-CR",
          "es-DO",
          "es-EC",
          "es-SV",
          "es-GT",
          "es-HN",
          "es-MX",
          "es-NI",
          "es-PA",
          "es-PY",
          "es-PE",
          "es-PR",
          "es",
          "es-ES",
          "es-US",
          "es-UY",
          "es-VE",
          "sv",
          "sv-FI",
          "sv-SE",
          "ta-IN",
          "te-IN",
          "th",
          "th-TH",
          "ts",
          "tn",
          "tr",
          "tr-TR",
          "ua",
          "uk-UA",
          "ur",
          "ve",
          "vi",
          "vi-VN",
          "cy",
          "cy-GB",
          "xh",
          "ji",
          "zu"
        ],
        "type": "string",
        "description": "Language Code ISO 639-1 merged from\n\n1. https://www.andiamo.co.uk/resources/iso-language-codes/\n\n2. https://www.twilio.com/docs/voice/twiml/say/text-speech#available-voices-and-languages"
      },
      "ListResponse_EventLogResponse_": {
        "title": "ListResponse[EventLogResponse]",
        "required": ["data"],
        "type": "object",
        "properties": {
          "total": {
            "title": "total",
            "type": "integer",
            "description": "The total count of entries.",
            "example": 0
          },
          "data": {
            "title": "data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventLogResponse"
            },
            "description": "The entry list."
          }
        },
        "description": "ListResponse schema."
      },
      "SeaNotifyEventType": {
        "title": "SeaNotifyEventType",
        "description": "SeaNotifyEventType enum.",
        "enum": [
          "conversation.new",
          "conversation.updated",
          "message.new",
          "conversation.ended",
          "conversation.label.added",
          "conversation.label.deleted",
          "call.new",
          "call.ended",
          "call.updated",
          "call.missed",
          "contact.new",
          "contact.updated",
          "contact.deleted",
          "contact.label.added",
          "contact.label.deleted"
        ],
        "type": "string"
      },
      "SubscriptionListResponse": {
        "title": "SubscriptionListResponse",
        "required": ["subscriptions"],
        "type": "object",
        "properties": {
          "subscriptions": {
            "title": "Subscriptions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionResponseType"
            },
            "description": "List of subscriptions for the workspace"
          }
        },
        "description": "Response model containing a list of subscriptions for a workspace."
      },
      "SubscriptionPostType": {
        "title": "SubscriptionPostType",
        "required": ["webhook_url", "event_types", "is_enabled"],
        "type": "object",
        "properties": {
          "webhook_url": {
            "title": "Webhook URL",
            "type": "string",
            "description": "The URL where notifications will be sent",
            "example": "https://api.example.com/webhook"
          },
          "event_types": {
            "title": "Event Types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeaNotifyEventType"
            },
            "description": "List of event types to subscribe to",
            "example": ["conversation.new", "message.new"]
          },
          "created_by": {
            "title": "Created By",
            "type": "string",
            "description": "The identifier of the user creating the subscription",
            "example": "user_12345"
          },
          "is_enabled": {
            "title": "Is Enabled",
            "type": "boolean",
            "description": "Whether the subscription is currently active",
            "example": true
          },
          "type": {
            "title": "Subscription Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionType"
              }
            ],
            "description": "The type of subscription (seasalt or Test)",
            "default": "SEASALT",
            "example": "SEASALT"
          }
        },
        "description": "Pydantic model for creating a new webhook subscription."
      },
      "SubscriptionResponseType": {
        "title": "SubscriptionResponseType",
        "required": [
          "webhook_url",
          "event_types",
          "is_enabled",
          "id",
          "created_at",
          "updated_at",
          "updated_by"
        ],
        "type": "object",
        "properties": {
          "webhook_url": {
            "title": "Webhook URL",
            "type": "string",
            "description": "The URL where notifications will be sent",
            "example": "https://api.example.com/webhook"
          },
          "event_types": {
            "title": "Event Types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeaNotifyEventType"
            },
            "description": "List of event types to subscribe to",
            "example": ["conversation.new", "message.new"]
          },
          "created_by": {
            "title": "Created By",
            "type": "string",
            "description": "The identifier of the user creating the subscription",
            "example": "user_12345"
          },
          "is_enabled": {
            "title": "Is Enabled",
            "type": "boolean",
            "description": "Whether the subscription is currently active",
            "example": true
          },
          "type": {
            "title": "Subscription Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionType"
              }
            ],
            "description": "The type of subscription (seasalt or Test)",
            "example": "SEASALT"
          },
          "id": {
            "title": "Subscription ID",
            "type": "string",
            "description": "The unique identifier of the subscription",
            "example": "sub_12345"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "Timestamp when the subscription was created",
            "format": "date-time",
            "example": "2024-03-10T15:30:00Z"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "Timestamp when the subscription was last updated",
            "format": "date-time",
            "example": "2024-03-10T15:30:00Z"
          },
          "updated_by": {
            "title": "Updated By",
            "type": "string",
            "description": "The identifier of the user who last updated the subscription",
            "example": "user_12345"
          }
        },
        "description": "Extended response model for subscription details including timestamps and subscribed events."
      },
      "SubscriptionType": {
        "title": "SubscriptionType",
        "enum": ["SEASALT", "ZAPIER"],
        "type": "string",
        "description": "An enumeration."
      },
      "SubscriptionUpdateType": {
        "title": "SubscriptionUpdateType",
        "type": "object",
        "properties": {
          "webhook_url": {
            "title": "Webhook URL",
            "type": "string",
            "description": "The new URL where notifications will be sent",
            "example": "https://api.example.com/new-webhook"
          },
          "event_types": {
            "title": "Event Types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeaNotifyEventType"
            },
            "description": "New list of event types to subscribe to",
            "example": ["conversation.new", "message.new"]
          },
          "updated_by": {
            "title": "Updated By",
            "type": "string",
            "description": "The identifier of the user making the update",
            "example": "user_12345"
          },
          "is_enabled": {
            "title": "Is Enabled",
            "type": "boolean",
            "description": "Whether the subscription is currently active",
            "example": true
          },
          "type": {
            "title": "Subscription Type",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionType"
              }
            ],
            "description": "The type of subscription (seasalt or Test)",
            "example": "SEASALT"
          }
        },
        "description": "Model for updating an existing webhook subscription with optional fields."
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": ["loc", "msg", "type"],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "WebhookTestRequest": {
        "title": "WebhookTestRequest",
        "required": ["event_type", "webhook_url"],
        "type": "object",
        "properties": {
          "event_type": {
            "title": "Event Type",
            "type": "string",
            "description": "The type of event to test with the webhook."
          },
          "webhook_url": {
            "title": "Webhook URL",
            "type": "string",
            "description": "The URL of the webhook to test."
          }
        },
        "description": "Request model for testing a webhook with a specific event type."
      },
      "WebhookTestResponse": {
        "title": "WebhookTestResponse",
        "required": ["status"],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "description": "The status of the webhook test, indicating success or error."
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer",
            "description": "The HTTP status code returned by the webhook."
          },
          "response_body": {
            "title": "Response Body",
            "type": "object",
            "description": "The body of the response returned by the webhook."
          },
          "error_msg": {
            "title": "Error Message",
            "type": "string",
            "description": "A message describing any error that occurred during the webhook test."
          }
        },
        "description": "Response model for webhook test results including status and error information."
      },
      "ZapierEventTypesBase": {
        "title": "ZapierEventTypesBase",
        "type": "object",
        "properties": {
          "event_types": {
            "title": "Event Types",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Event types to subscribe to. Can be a comma-separated string or list of strings",
            "example": ["message.new", "conversation.label.added", "call.new"]
          }
        },
        "description": "Base model for Zapier event type handling with flexible input format."
      },
      "ZapierSubscriptionPostType": {
        "title": "ZapierSubscriptionPostType",
        "required": ["webhook_url", "zap_id"],
        "type": "object",
        "properties": {
          "event_types": {
            "title": "Event Types",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Event types to subscribe to. Can be a comma-separated string or list of strings",
            "example": ["message.new", "conversation.label.added", "call.new"]
          },
          "webhook_url": {
            "title": "Webhook Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "The URL where webhook notifications will be sent",
            "format": "uri",
            "example": "https://hooks.zapier.com/hooks/catch/123456/abcdef/"
          },
          "created_by": {
            "title": "Created By",
            "type": "string",
            "description": "Email or identifier of the user creating the subscription",
            "default": "zapier_user",
            "example": "user@example.com"
          },
          "zap_id": {
            "title": "Zap Id",
            "type": "string",
            "description": "Unique identifier for the Zapier Zap",
            "example": "1234-abcd-5678-efgh"
          }
        },
        "description": "Request model for creating a new Zapier webhook subscription."
      },
      "ZapierSubscriptionResponseType": {
        "title": "ZapierSubscriptionResponseType",
        "required": [
          "id",
          "workspace_id",
          "webhook_url",
          "created_by",
          "updated_by",
          "created_at",
          "type"
        ],
        "type": "object",
        "properties": {
          "event_types": {
            "title": "Event Types",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Event types to subscribe to. Can be a comma-separated string or list of strings",
            "example": ["message.new", "conversation.label.added", "call.new"]
          },
          "id": {
            "title": "Id",
            "type": "string",
            "description": "The id of this subscription",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspace_id": {
            "title": "Workspace Id",
            "type": "string",
            "description": "Identifier of the workspace this subscription belongs to",
            "example": "ws_123456"
          },
          "webhook_url": {
            "title": "Webhook Url",
            "type": "string",
            "description": "URL where webhook notifications are sent",
            "example": "https://hooks.zapier.com/hooks/catch/123456/abcdef/"
          },
          "created_by": {
            "title": "Created By",
            "type": "string",
            "description": "Email or identifier of the user who created the subscription",
            "example": "user@example.com"
          },
          "updated_by": {
            "title": "Updated By",
            "type": "string",
            "description": "Email or identifier of the user who last updated the subscription",
            "example": "user@example.com"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "Timestamp when the subscription was created",
            "format": "date-time",
            "example": "2024-03-15T10:30:00Z"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "description": "Timestamp when the subscription was last updated",
            "format": "date-time",
            "example": "2024-03-15T11:45:00Z"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionType"
              }
            ],
            "description": "Type of subscription (always zapier for Zapier integrations)",
            "example": "ZAPIER"
          }
        },
        "description": "Response model for Zapier subscription details including metadata and timestamps."
      },
      "SeaNotifyWorkspaceSchema": {
        "title": "SeaNotifyWorkspaceSchema",
        "description": "Workspace information in a event.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["id", "name"]
      },
      "ConversationChannelType": {
        "title": "ConversationChannelType",
        "description": "Channel type of conversation",
        "enum": [
          "WEBCHAT",
          "LINE",
          "WHATSAPP",
          "MESSENGER",
          "INSTAGRAM",
          "VOICE",
          "THIRD_PARTY_CLIENT",
          "SEAX_SMS",
          "SEAX_CALL",
          "SEAX_WABP"
        ],
        "type": "string"
      },
      "SeaNotifySourceSchema": {
        "title": "SeaNotifySourceSchema",
        "description": "Source of a event.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "identifier": {
            "title": "Identifier",
            "type": "string"
          }
        },
        "required": ["id", "type", "identifier"]
      },
      "SeaNotifyCustomerSchema": {
        "title": "SeaNotifyCustomerSchema",
        "description": "Customer information in a event.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "phone": {
            "title": "Phone",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "address": {
            "title": "Address",
            "type": "string"
          }
        },
        "required": ["id", "channel"]
      },
      "ConversationMessageDirection": {
        "title": "ConversationMessageDirection",
        "description": "Direction of conversation message",
        "enum": ["INBOUND", "OUTBOUND"],
        "type": "string"
      },
      "SeaNotifyMessageSchema": {
        "title": "SeaNotifyMessageSchema",
        "description": "Message schema in a event.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/ConversationMessageDirection"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "type": {
            "title": "Type",
            "type": "string"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "direction", "text", "type", "created_at"]
      },
      "SeaNotifyConversationNewEventDataSchemaBase": {
        "title": "SeaNotifyConversationNewEventDataSchemaBase",
        "description": "New conversation event data schema. ",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "customer": {
            "$ref": "#/components/schemas/SeaNotifyCustomerSchema"
          },
          "latest_inbound_message": {
            "$ref": "#/components/schemas/SeaNotifyMessageSchema"
          },
          "latest_outbound_message": {
            "$ref": "#/components/schemas/SeaNotifyMessageSchema"
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "channel",
          "customer"
        ]
      },
      "ConversationNewEvent": {
        "title": "ConversationNewEvent",
        "description": "New conversation event schema.\n\nThis event is triggered when a new conversation is created.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyConversationNewEventDataSchemaBase"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "add",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "conversation.new",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "conversation_id": "conv-789",
            "conversation_title": "Example Conversation",
            "channel": "WEBCHAT",
            "customer": {
              "id": "cust-001",
              "name": "Test User",
              "email": "Test@example.com",
              "phone": "+123456789",
              "address": "Test AI Agent",
              "channel": "WEBCHAT"
            },
            "latest_inbound_message": {
              "id": "msg-in-123456",
              "direction": "INBOUND",
              "text": "Hello, I need help!",
              "type": "text",
              "created_at": "2025-06-20T23:44:00.000000"
            },
            "latest_outbound_message": {
              "id": "msg-out-123456",
              "direction": "OUTBOUND",
              "text": "Sure, how can I assist?",
              "type": "text",
              "created_at": "2025-06-20T23:44:30.000000"
            }
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "SeaNotifyConversationUpdateEntitySchema": {
        "title": "SeaNotifyConversationUpdateEntitySchema",
        "description": "The schema of who triggered this event.",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        }
      },
      "SeaNotifyConversationUpdateEventDataSchema": {
        "title": "SeaNotifyConversationUpdateEventDataSchema",
        "description": "Update conversation data schema.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "customer": {
            "$ref": "#/components/schemas/SeaNotifyCustomerSchema"
          },
          "updated_fields": {
            "title": "Updated Fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previous": {
            "title": "Previous",
            "type": "object"
          },
          "current": {
            "title": "Current",
            "type": "object"
          },
          "updated_by": {
            "$ref": "#/components/schemas/SeaNotifyConversationUpdateEntitySchema"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "channel",
          "customer",
          "updated_fields",
          "updated_at"
        ]
      },
      "ConversationUpdateEvent": {
        "title": "ConversationUpdateEvent",
        "description": "Update conversation event schema.\n\nThis event is triggered when a conversation is updated.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyConversationUpdateEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "change",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "conversation.updated",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "conversation_id": "conv-789",
            "conversation_title": "Example Conversation",
            "channel": "WEBCHAT",
            "customer": {
              "id": "fb0b4af0-ad6a-48a3-ad3c-d10b237b432c",
              "name": "Test User",
              "email": "Test@example.com",
              "phone": "+123456789",
              "address": "Test AI Agent",
              "channel": "WEBCHAT"
            },
            "updated_fields": ["is_unread"],
            "previous": {
              "is_unread": "false"
            },
            "current": {
              "is_unread": "true"
            },
            "updated_by": {
              "type": "USER",
              "id": "user-abc-123",
              "name": "Test User"
            },
            "updated_at": "2025-06-20T23:57:30.000000"
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "ConversationEndedEvent": {
        "title": "ConversationEndedEvent",
        "description": "Conversation ended event schema.\n\nThis event is triggered when a conversation is ended.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyConversationUpdateEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "change",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "conversation.ended",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "conversation_id": "conv-789",
            "conversation_title": "Example Conversation",
            "channel": "WEBCHAT",
            "customer": {
              "id": "fb0b4af0-ad6a-48a3-ad3c-d10b237b432c",
              "name": "Test User",
              "email": "Test@example.com",
              "phone": "+123456789",
              "address": "Test AI Agent",
              "channel": "WEBCHAT"
            },
            "updated_fields": ["CSAT_SUBMISSION"],
            "previous": "null",
            "current": {
              "rating": 5,
              "comment": "Quick and accurate response. Nice experience!"
            },
            "updated_by": {
              "type": "USER",
              "id": "user-abc-123",
              "name": "Test User"
            },
            "updated_at": "2025-06-20T23:57:30.000000"
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "SenderType": {
        "title": "SenderType",
        "description": "Sender type enum.",
        "enum": ["CUSTOMER", "AGENT", "BOT", "SYSTEM"],
        "type": "string"
      },
      "SeaNotifyMessageNewEventSenderSchema": {
        "title": "SeaNotifyMessageNewEventSenderSchema",
        "description": "New message sender schema.",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SenderType"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["type", "id"]
      },
      "SeaNotifyMessageNewEventContentSchema": {
        "title": "SeaNotifyMessageNewEventContentSchema",
        "description": "New message content schema.",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "data": {
            "title": "Data",
            "type": "object"
          }
        },
        "required": ["type", "text"]
      },
      "SeaNotifyMessageNewEventDataSchema": {
        "title": "SeaNotifyMessageNewEventDataSchema",
        "description": "New message data schema.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "message_id": {
            "title": "Message Id",
            "type": "string"
          },
          "direction": {
            "$ref": "#/components/schemas/ConversationMessageDirection"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "format": "date-time"
          },
          "sender": {
            "$ref": "#/components/schemas/SeaNotifyMessageNewEventSenderSchema"
          },
          "content": {
            "$ref": "#/components/schemas/SeaNotifyMessageNewEventContentSchema"
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "message_id",
          "direction",
          "created_at",
          "sender",
          "content"
        ]
      },
      "MessageNewEvent": {
        "title": "MessageNewEvent",
        "description": "New Message event schema.\n\nThis event is triggered when a message is created.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyMessageNewEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "add",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "message.new",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "message_id": "8e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "conversation_id": "9e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "conversation_title": "Test Conversation Example",
            "direction": "OUTBOUND",
            "created_at": "2025-06-20T23:44:30.000000",
            "sender": {
              "id": "FREE_NOTIFY",
              "name": "Test AI Agent",
              "type": "AGENT"
            },
            "content": {
              "type": "text",
              "text": "Hello, how can I assist you today?",
              "data": null
            }
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "LabelType": {
        "title": "LabelType",
        "description": "Type of label.",
        "enum": ["CONTACT", "CONVERSATION", "MEETING", "WORKSPACE"],
        "type": "string"
      },
      "Label": {
        "title": "Label",
        "description": "Schema of label.",
        "type": "object",
        "properties": {
          "name": {
            "title": "name",
            "description": "The name of label.",
            "example": "Label Name",
            "type": "string"
          },
          "color": {
            "title": "color",
            "description": "The color of label.",
            "example": "#FF8964",
            "type": "string"
          },
          "description": {
            "title": "description",
            "description": "The description of label.",
            "default": "",
            "example": "Label Description",
            "type": "string"
          },
          "is_system": {
            "title": "is_system",
            "description": "Is system label?",
            "default": false,
            "example": false,
            "type": "boolean"
          },
          "id": {
            "title": "id",
            "description": "The id of label.",
            "example": "xxxxx",
            "type": "string"
          },
          "type": {
            "title": "type",
            "description": "The type of label.",
            "example": "CONTACT",
            "allOf": [
              {
                "$ref": "#/components/schemas/LabelType"
              }
            ]
          }
        },
        "required": ["name", "color", "id", "type"]
      },
      "SeaNotifyConversationLabelAddEventDataSchema": {
        "title": "SeaNotifyConversationLabelAddEventDataSchema",
        "description": "Add label data schema.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "customer": {
            "$ref": "#/components/schemas/SeaNotifyCustomerSchema"
          },
          "updated_fields": {
            "title": "Updated Fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previous": {
            "title": "Previous",
            "type": "object"
          },
          "current": {
            "title": "Current",
            "type": "object"
          },
          "added_by": {
            "$ref": "#/components/schemas/SeaNotifyConversationUpdateEntitySchema"
          },
          "added_at": {
            "title": "Added At",
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "title": "Labels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "channel",
          "customer",
          "updated_fields",
          "added_at",
          "labels"
        ]
      },
      "ConversationLabelAddedEvent": {
        "title": "ConversationLabelAddedEvent",
        "description": "New label attached to conversation event schema.\n\nThis event is triggered when a new label is attached to a conversation .",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyConversationLabelAddEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "add",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "conversation.label.added",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "conversation_title": "Test Label Add Conversation",
            "channel": "WEBCHAT",
            "customer": {
              "id": "fb0b4af0-ad6a-48a3-ad3c-d10b237b432c",
              "name": "Beveled Narrows bf511090ea",
              "email": "",
              "phone": "",
              "address": "Test bot 2",
              "channel": "WEBCHAT"
            },
            "updated_fields": ["labels"],
            "previous": {
              "labels": [
                {
                  "id": "8d99e9b041f04447858cde7506cee4d5",
                  "color": "#565e9c",
                  "label": "newUser",
                  "created_at": "2025-04-08T02:48:25.059243",
                  "updated_at": "2025-04-08T02:48:25.059243",
                  "description": "this is a new user",
                  "workspace_id": "ws_12345"
                }
              ]
            },
            "current": {
              "labels": [
                {
                  "id": "8d99e9b041f04447858cde7506cee4d5",
                  "color": "#565e9c",
                  "label": "newUser",
                  "created_at": "2025-04-08T02:48:25.059243",
                  "updated_at": "2025-04-08T02:48:25.059243",
                  "description": "this is a new user",
                  "workspace_id": "ws_12345"
                },
                {
                  "id": "90c51757408941e2834f76392249b10f",
                  "color": "#a7927f",
                  "label": "solved",
                  "created_at": "2025-05-10T00:20:38.834259",
                  "updated_at": "2025-05-10T00:20:38.834259",
                  "description": "",
                  "workspace_id": "ws_12345"
                }
              ]
            },
            "labels": [
              {
                "id": "90c51757408941e2834f76392249b10f",
                "name": "solved",
                "type": "CONVERSATION",
                "color": "#a7927f",
                "is_system": false,
                "description": ""
              }
            ],
            "added_by": {
              "type": "USER",
              "id": "user-12345",
              "name": "Test User"
            },
            "added_at": "2025-05-10T00:20:38.834259"
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "SeaNotifyConversationLabelRemoveEventDataSchema": {
        "title": "SeaNotifyConversationLabelRemoveEventDataSchema",
        "description": "Remove label data schema.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "customer": {
            "$ref": "#/components/schemas/SeaNotifyCustomerSchema"
          },
          "updated_fields": {
            "title": "Updated Fields",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "previous": {
            "title": "Previous",
            "type": "object"
          },
          "current": {
            "title": "Current",
            "type": "object"
          },
          "removed_by": {
            "$ref": "#/components/schemas/SeaNotifyConversationUpdateEntitySchema"
          },
          "removed_at": {
            "title": "Removed At",
            "type": "string",
            "format": "date-time"
          },
          "labels": {
            "title": "Labels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            }
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "channel",
          "customer",
          "updated_fields",
          "removed_at",
          "labels"
        ]
      },
      "ConversationLabelDeletedEvent": {
        "title": "ConversationLabelDeletedEvent",
        "description": "A label removed from conversation event schema.\n\nThis event is triggered when a label is removed from a conversation .",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyConversationLabelRemoveEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "delete",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "conversation.label.deleted",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "conversation_title": "Test Label Test Conversation",
            "channel": "WEBCHAT",
            "customer": {
              "id": "fb0b4af0-ad6a-48a3-ad3c-d10b237b432c",
              "name": "Beveled Narrows bf511090ea",
              "email": "",
              "phone": "",
              "address": "Test bot 2",
              "channel": "WEBCHAT"
            },
            "updated_fields": ["labels"],
            "previous": {
              "labels": [
                {
                  "id": "8d99e9b041f04447858cde7506cee4d5",
                  "color": "#565e9c",
                  "label": "newUser",
                  "created_at": "2025-04-08T02:48:25.059243",
                  "updated_at": "2025-04-08T02:48:25.059243",
                  "description": "this is a new user",
                  "workspace_id": "ws_12345"
                },
                {
                  "id": "90c51757408941e2834f76392249b10f",
                  "color": "#a7927f",
                  "label": "solved",
                  "created_at": "2025-05-10T00:20:38.834259",
                  "updated_at": "2025-05-10T00:20:38.834259",
                  "description": "",
                  "workspace_id": "ws_12345"
                }
              ]
            },
            "current": {
              "labels": [
                {
                  "id": "8d99e9b041f04447858cde7506cee4d5",
                  "color": "#565e9c",
                  "label": "newUser",
                  "created_at": "2025-04-08T02:48:25.059243",
                  "updated_at": "2025-04-08T02:48:25.059243",
                  "description": "this is a new user",
                  "workspace_id": "ws_12345"
                }
              ]
            },
            "labels": [
              {
                "id": "90c51757408941e2834f76392249b10f",
                "name": "solved",
                "type": "CONVERSATION",
                "color": "#a7927f",
                "is_system": false,
                "description": ""
              }
            ],
            "removed_by": {
              "type": "USER",
              "id": "user-12345",
              "name": "Kelly Kang"
            },
            "removed_at": "2025-04-08T02:48:25.059243"
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "SeaNotifyCallEventEntitySchema": {
        "title": "SeaNotifyCallEventEntitySchema",
        "description": "Schema of caller and callee.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SenderType"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "address": {
            "title": "Address",
            "type": "string"
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "type",
          "id",
          "address"
        ]
      },
      "SeaNotifyCallNewEventDataSchema": {
        "title": "SeaNotifyCallNewEventDataSchema",
        "description": "New call data schema.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "direction": {
            "$ref": "#/components/schemas/ConversationMessageDirection"
          },
          "call_from": {
            "$ref": "#/components/schemas/SeaNotifyCallEventEntitySchema"
          },
          "call_to": {
            "$ref": "#/components/schemas/SeaNotifyCallEventEntitySchema"
          },
          "started_at": {
            "title": "Started At",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object"
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "channel",
          "direction",
          "call_from",
          "call_to",
          "started_at"
        ]
      },
      "CallNewEvent": {
        "title": "CallNewEvent",
        "description": "New call event schema.\n\nThis event is triggered when a call starts.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyCallNewEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "add",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "call.new",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "conversation_title": "+123456789",
            "channel": "SEAX_CALL",
            "direction": "OUTBOUND",
            "started_at": "2025-06-20T23:44:30.000000",
            "call_from": {
              "id": "+123456789",
              "name": "Test AI Agent",
              "type": "AGENT",
              "address": "+123456789",
              "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "conversation_title": "+123456789"
            },
            "call_to": {
              "id": "9e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "name": "+123456789",
              "type": "CUSTOMER",
              "address": "+123456789",
              "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "conversation_title": "+123456789"
            },
            "metadata": null
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "SeaNotifyCallFinishReason": {
        "title": "SeaNotifyCallFinishReason",
        "description": "Reasons for a call finished enum.",
        "enum": ["unanswered", "missed", "voicemail", "completed"],
        "type": "string"
      },
      "SeaNotifyCallEndEventDataSchema": {
        "title": "SeaNotifyCallEndEventDataSchema",
        "description": "End call data schema.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ConversationChannelType"
          },
          "direction": {
            "$ref": "#/components/schemas/ConversationMessageDirection"
          },
          "duration_seconds": {
            "title": "Duration Seconds",
            "type": "integer"
          },
          "finish_reason": {
            "$ref": "#/components/schemas/SeaNotifyCallFinishReason"
          },
          "call_from": {
            "$ref": "#/components/schemas/SeaNotifyCallEventEntitySchema"
          },
          "call_to": {
            "$ref": "#/components/schemas/SeaNotifyCallEventEntitySchema"
          },
          "finished_at": {
            "title": "Finished At",
            "type": "string",
            "format": "date-time"
          },
          "finished_by": {
            "title": "Finished By",
            "type": "string",
            "format": "date-time"
          },
          "recording_available": {
            "title": "Recording Available",
            "type": "boolean"
          },
          "recording_url": {
            "title": "Recording Url",
            "type": "string"
          }
        },
        "required": [
          "conversation_id",
          "conversation_title",
          "channel",
          "direction",
          "duration_seconds",
          "finish_reason",
          "call_from",
          "call_to",
          "finished_at",
          "finished_by",
          "recording_available"
        ]
      },
      "CallEndedEvent": {
        "title": "CallEndedEvent",
        "description": "A call end event schema.\n\nThis event is triggered when a call ends.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyCallEndEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "change",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "call.ended",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "conversation_title": "+123456789",
            "channel": "SEAX_CALL",
            "direction": "OUTBOUND",
            "duration_seconds": 4,
            "finish_reason": "completed",
            "finished_at": "2025-06-20T23:44:30.000000",
            "finished_by": "2025-06-20T23:44:30.000000",
            "recording_url": null,
            "recording_available": false,
            "call_from": {
              "id": "8e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "name": "SeaChatGPT Demo",
              "type": "AGENT",
              "address": "+123456789",
              "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "conversation_title": "+123456789"
            },
            "call_to": {
              "id": "9e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "name": "+123456789",
              "type": "CUSTOMER",
              "address": "+123456789",
              "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "conversation_title": "+123456789"
            }
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "SeaNotifyCallUpdateEventDataSchema": {
        "title": "SeaNotifyCallUpdateEventDataSchema",
        "description": "Update call data schema.",
        "type": "object",
        "properties": {
          "conversation_id": {
            "title": "Conversation Id",
            "type": "string"
          },
          "conversation_title": {
            "title": "Conversation Title",
            "type": "string"
          },
          "call_id": {
            "title": "Call Id",
            "type": "string"
          },
          "update_reason": {
            "title": "Update Reason",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "object"
          },
          "current": {
            "title": "Current",
            "type": "object"
          },
          "updated_at": {
            "title": "Updated At",
            "type": "string",
            "format": "date-time"
          },
          "resources": {
            "title": "Resources",
            "type": "object"
          }
        },
        "required": ["conversation_id", "conversation_title", "updated_at"]
      },
      "CallUpdatedEvent": {
        "title": "CallUpdatedEvent",
        "description": "A call update event schema.\n\nThis event is triggered when a call is updated.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "description": "Unique ID of the event.",
            "example": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "description": "Version of the event schema.",
            "example": "0.0.1",
            "type": "string"
          },
          "timestamp": {
            "title": "Timestamp",
            "description": "Timestamp event is sent",
            "example": "2025-06-20T23:44:30.000000",
            "type": "string"
          },
          "event_type": {
            "description": "Event type name",
            "example": "conversation.new",
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyEventType"
              }
            ]
          },
          "workspace": {
            "title": "Workspace",
            "description": "Workspace Information",
            "example": {
              "id": "ws_12345",
              "name": "Test Name"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifyWorkspaceSchema"
              }
            ]
          },
          "source": {
            "title": "Source",
            "description": "Workspace Information",
            "example": {
              "id": "source-456",
              "type": "WEBCHAT",
              "identifier": "Test AI Agent"
            },
            "allOf": [
              {
                "$ref": "#/components/schemas/SeaNotifySourceSchema"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/SeaNotifyCallUpdateEventDataSchema"
          }
        },
        "required": [
          "id",
          "version",
          "timestamp",
          "event_type",
          "workspace",
          "source",
          "data"
        ],
        "example": {
          "id": "6e74c661-4c66-4d1e-81b0-64b2f4dcac98",
          "affect": "change",
          "version": "0.0.1",
          "timestamp": "2025-06-20T23:44:30.000000",
          "event_type": "call.updated",
          "workspace": {
            "id": "workspace-123",
            "name": "Test Workspace"
          },
          "source": {
            "id": "source-456",
            "type": "WEBCHAT",
            "identifier": "Test AI Agent"
          },
          "data": {
            "id": "+123456789",
            "updated_at": "2025-06-20T23:44:30.000000",
            "update_reason": "recording_ready",
            "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98",
            "conversation_title": "+123456789",
            "current": {
              "recording_url": "www.exmapledownloadurl.map3"
            },
            "previous": {
              "recording_url": null
            },
            "resources": {
              "session_id": "8e74c661-4c66-4d1e-81b0-64b2f4dcac98",
              "channel_type": "SEAX_CALL",
              "conversation_id": "7e74c661-4c66-4d1e-81b0-64b2f4dcac98"
            }
          },
          "subscription_created_by": "Test_user",
          "subscription_updated_by": "Test_user"
        }
      },
      "WebhookEventResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ConversationNewEvent"
          },
          {
            "$ref": "#/components/schemas/ConversationUpdateEvent"
          },
          {
            "$ref": "#/components/schemas/ConversationEndedEvent"
          },
          {
            "$ref": "#/components/schemas/MessageNewEvent"
          },
          {
            "$ref": "#/components/schemas/ConversationLabelAddedEvent"
          },
          {
            "$ref": "#/components/schemas/ConversationLabelDeletedEvent"
          },
          {
            "$ref": "#/components/schemas/CallNewEvent"
          },
          {
            "$ref": "#/components/schemas/CallEndedEvent"
          },
          {
            "$ref": "#/components/schemas/CallUpdatedEvent"
          }
        ],
        "title": "WebhookEventResponse",
        "description": "All possible event types the webhook can deliver."
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  }
}
